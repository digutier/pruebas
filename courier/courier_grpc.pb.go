// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package courier

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CourierServiceClient is the client API for CourierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourierServiceClient interface {
	Hello(ctx context.Context, in *Mensaje, opts ...grpc.CallOption) (*Mensaje, error)
	CodigoPyme(ctx context.Context, in *OrdenPyme, opts ...grpc.CallOption) (*Codigo, error)
}

type courierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCourierServiceClient(cc grpc.ClientConnInterface) CourierServiceClient {
	return &courierServiceClient{cc}
}

func (c *courierServiceClient) Hello(ctx context.Context, in *Mensaje, opts ...grpc.CallOption) (*Mensaje, error) {
	out := new(Mensaje)
	err := c.cc.Invoke(ctx, "/courier.CourierService/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierServiceClient) CodigoPyme(ctx context.Context, in *OrdenPyme, opts ...grpc.CallOption) (*Codigo, error) {
	out := new(Codigo)
	err := c.cc.Invoke(ctx, "/courier.CourierService/CodigoPyme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourierServiceServer is the server API for CourierService service.
// All implementations must embed UnimplementedCourierServiceServer
// for forward compatibility
type CourierServiceServer interface {
	Hello(context.Context, *Mensaje) (*Mensaje, error)
	CodigoPyme(context.Context, *OrdenPyme) (*Codigo, error)
	mustEmbedUnimplementedCourierServiceServer()
}

// UnimplementedCourierServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCourierServiceServer struct {
}

func (UnimplementedCourierServiceServer) Hello(context.Context, *Mensaje) (*Mensaje, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedCourierServiceServer) CodigoPyme(context.Context, *OrdenPyme) (*Codigo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CodigoPyme not implemented")
}
func (UnimplementedCourierServiceServer) mustEmbedUnimplementedCourierServiceServer() {}

// UnsafeCourierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourierServiceServer will
// result in compilation errors.
type UnsafeCourierServiceServer interface {
	mustEmbedUnimplementedCourierServiceServer()
}

func RegisterCourierServiceServer(s *grpc.Server, srv CourierServiceServer) {
	s.RegisterService(&_CourierService_serviceDesc, srv)
}

func _CourierService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mensaje)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/courier.CourierService/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierServiceServer).Hello(ctx, req.(*Mensaje))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierService_CodigoPyme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdenPyme)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierServiceServer).CodigoPyme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/courier.CourierService/CodigoPyme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierServiceServer).CodigoPyme(ctx, req.(*OrdenPyme))
	}
	return interceptor(ctx, in, info, handler)
}

var _CourierService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "courier.CourierService",
	HandlerType: (*CourierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _CourierService_Hello_Handler,
		},
		{
			MethodName: "CodigoPyme",
			Handler:    _CourierService_CodigoPyme_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "courier/courier.proto",
}
